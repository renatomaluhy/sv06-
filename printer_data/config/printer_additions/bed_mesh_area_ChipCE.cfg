;  ChipCE's Bed Mesh Area (heavily modified by Christian Vick)
;  Part of CV's Klipper Printer Additions.         
;  
;
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

;â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;â€¢â€¢â€¢â€¢ Module Standard Stuff
;â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
[delayed_gcode _startup_check_bed_mesh_area]
initial_duration: 3.02
gcode:
  ; Introduce me
  {% set module_version = "3.0b9.1" %} 
  _Module_loaded_add NAME="Bed Mesh Area" VERSION="{module_version}"

[gcode_macro Mesh_Adaptive_Mode]
description: KPA Button. Creates an adaptive bed mesh, according to the area where the model is printed on the bed. Saves time on smaller models. 
gcode:
  {% set myname = "Mesh_Adaptive_Mode" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set mode = psv.pre_print_mesh_mode %}

  {% if varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}

  {% else %} 
    {% set pre = "SET: " %}
    {% set mode = "adaptive" %}
    SAVE_VARIABLE VARIABLE=pre_print_mesh_mode VALUE='"{mode}"'

  {% endif %}

    {% set suff2 = "

    To switch to Adaptive Mesh mode, click this button again within 5 seconds." %}

  {% if mode == "adaptive" %}
    {% set dmode = "ON: Adaptive Mesh Mode" %}
    {% set suff2 = "" %}
  {% elif mode == "multiple" %}
    {% set dmode = "OFF: Adaptive Mesh Mode" %}
  {% else %}
    {% set dmode = "Unknown mode: " + mode|string %}
  {% endif %}

  {% set m = pre + dmode + suff2 + "

    INFO:
    Adaptive Mesh Mode creates a bed mesh before every print. The bed is only probed in the area where the model is printed, which saves time on smaller prints." %}

  {action_respond_info(m)}

  _UI_Button_Clicked NAME={myname}

;â€¢ The following code has been originally written by ChipCE.
;â€¢ Source: https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
;â€¢ This is a heavily modified version of it, with not much left of the original, to fit the needs of the KPA.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE

variable_parameter_AREA_START: '0.2,20.5'
variable_parameter_AREA_END: '305,280'

variable_mesh_area_offset : 20 

variable_sample_count : 2     

variable_probe_count_min : 3   

gcode:
  {% set debugF = False %}

  _Lg TYPE="posi" MSG="BMC: Enter"

  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set debugF = True if "mesh" in varis.to_log_types else debugF %}
  {% set debugF = True if "move" in varis.to_log_types else debugF %}
  {% set debugF = True if "posi" in varis.to_log_types else debugF %}

  {% set mesh_name = params.PROFILE|default("default")|string%} 

  _Home_XYZ_IfNotHomed

  {% set probePointsX = varis.mesh_probe_point_count_x %}
  {% set probePointsY = varis.mesh_probe_point_count_y %}
  {% if debugF %}
    {action_respond_info("BMC varis meshpoints:
    probePointsX: "+probePointsX|string+"
    probePointsY: "+probePointsY|string+"
    ......Name: "+mesh_name)}
  {% endif %}

  {% if params.AREA_START and params.AREA_END %}

    {% set bedMeshConfig = printer.configfile.config.bed_mesh %}
    {% set bmSave_X_min = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set bmSave_Y_min = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set bmSave_X_max = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set bmSave_Y_max = bedMeshConfig.mesh_max.split(",")[1]|float %}
    {% if debugF %}
      {action_respond_info("BMC adaptive config:
      bmSave_X_min: "+bmSave_X_min|string+"
      bmSave_Y_min: "+bmSave_Y_min|string+"
      bmSave_X_max: "+bmSave_X_max|string+"
      bmSave_Y_max: "+bmSave_Y_max|string)}
    {% endif %}

    {% set area_x_min = params.AREA_START.split(",")[0]|float %}
    {% set area_y_min = params.AREA_START.split(",")[1]|float %}
    {% set area_x_max = params.AREA_END.split(",")[0]|float %}
    {% set area_y_max = params.AREA_END.split(",")[1]|float %}

    {% if debugF %}
      {action_respond_info("BMC adaptive, area params:
      area_x_min: "+area_x_min|string+"
      area_y_min: "+area_y_min|string+"
      area_x_max: "+area_x_max|string+"
      area_y_max: "+area_y_max|string)}
    {% endif %}

    {% set meshMaxPointX = probePointsX %}
    {% set meshMaxPointY = probePointsY %}

    {% if (area_x_min < area_x_max) and (area_y_min < area_y_max) %}

      {% set area_x_min = area_x_min - mesh_area_offset %}
      {% set area_y_min = area_y_min - mesh_area_offset %}
      {% set area_x_max = area_x_max + mesh_area_offset %}
      {% set area_y_max = area_y_max + mesh_area_offset %}
      {% if debugF %}
        {action_respond_info("BMC adaptive, area with offset:
        area_x_min: "+area_x_min|string+"
        area_y_min: "+area_y_min|string+"
        area_x_max: "+area_x_max|string+"
        area_y_max: "+area_y_max|string)}
      {% endif %}

      {% set area_x_min = bmSave_X_min if area_x_min < bmSave_X_min else area_x_min %}
      {% set area_y_min = bmSave_Y_min if area_y_min < bmSave_Y_min else area_y_min %}
      {% set area_x_max = bmSave_X_max if area_x_max > bmSave_X_max else area_x_max %}
      {% set area_y_max = bmSave_Y_max if area_y_max > bmSave_Y_max else area_y_max %}

      {% if debugF %}
        {action_respond_info("BMC adaptive, area offset checked:
        area_x_min: "+area_x_min|string+"
        area_y_min: "+area_y_min|string+"
        area_x_max: "+area_x_max|string+"
        area_y_max: "+area_y_max|string+"
        ....size x: "+(area_x_max - area_x_min)|string+"
        ....size y: "+(area_y_max - area_y_min)|string)}
      {% endif %}

      {% set probePointsX = ((area_x_max - area_x_min) / psv.pre_print_mesh_probe_point_distance)|round(0)|int %}
      {% if debugF %} {action_respond_info("BMC point distance calc, Probe Points X: "+probePointsX|string)} {% endif %}

      {% set probePointsX = probe_count_min if (probePointsX < probe_count_min) else probePointsX %}
      {% if debugF %} {action_respond_info("BMC point distance check1, Probe Points X: "+probePointsX|string)} {% endif %}

      {% set probePointsX =   meshMaxPointX if (probePointsX > meshMaxPointX)   else probePointsX %}
      {% if debugF %} {action_respond_info("BMC point distance check2, Probe Points X: "+probePointsX|string)} {% endif %}

      {% set probePointsY = ((area_y_max - area_y_min) / psv.pre_print_mesh_probe_point_distance)|round(0)|int %}
      {% if debugF %} {action_respond_info("BMC point distance calc, Probe Points Y: "+probePointsY|string)} {% endif %}

      {% set probePointsY = probe_count_min if (probePointsY < probe_count_min) else probePointsY %}
      {% if debugF %} {action_respond_info("BMC point distance check1, Probe Points Y: "+probePointsY|string)} {% endif %}

      {% set probePointsY =   meshMaxPointY if (probePointsY > meshMaxPointY)   else probePointsY%}
      {% if debugF %} {action_respond_info("BMC point distance check2, Probe Points Y: "+probePointsY|string)} {% endif %}

      {% set probePointsX = 4 if (probePointsX < 4) and (probePointsY > 6) else probePointsX %}
      {% if debugF %} {action_respond_info("BMC point distance check3, Probe Points X: "+probePointsX|string)} {% endif %}

      {% set probePointsY = 4 if (probePointsY < 4) and (probePointsX > 6) else probePointsY %}
      {% if debugF %} {action_respond_info("BMC point distance check3, Probe Points Y: "+probePointsY|string)} {% endif %}

      {% if debugF %}
        {action_respond_info("Probe Points, after checks:
        Probe Points X: "+probePointsX|string+"
        Probe Points Y: "+probePointsY|string)}
      {% endif %}

      {% set algorithm = "lagrange" %}    
      {% if "algorithm" in bedMeshConfig %}           {% set algorithm = bedMeshConfig.algorithm %} {% endif %}
      {% if probePointsX >=7 or probePointsY >=7 %}   {% set algorithm = "bicubic" %}               {% endif %}

      {% set mesh_pps = "2,2" %}          
      {% if "mesh_pps" in bedMeshConfig %}            {% set mesh_pps = bedMeshConfig.mesh_pps %}   {% endif %}

      {% set bicubic_tension = "n/a" %} 
      {% if algorithm == "bicubic" %} 
        {% set bicubic_tension = "0.2" %} 
        {% if "bicubic_tension" in bedMeshConfig %}   {% set bicubic_tension = bedMeshConfig.bicubic_tension %} {% endif %}
      {% endif %}

      {% set move_check_distance = "5" %} 
      {% if "move_check_distance" in bedMeshConfig %} {% set move_check_distance = bedMeshConfig.move_check_distance %} {% endif %}

      {% set split_delta_z = "0.025" %} 
      {% if "split_delta_z" in bedMeshConfig %}       {% set split_delta_z = bedMeshConfig.split_delta_z %} {% endif %}

      {action_respond_info("An adaptive bed mesh with " + (probePointsX * probePointsY)|string + " points will be created.
      ......Probe Points X: "+probePointsX|string+"
      ......Probe Points Y: "+probePointsY|string+"
      ...........Algorithm: "+algorithm|string+"
      .....Bicubic Tension: "+bicubic_tension|string+"
      Interpolation Points: "+mesh_pps|string+"
      .Move Check Distance: "+move_check_distance|string+"
      .......Split Delta Z: "+split_delta_z|string+"
      ................Name: "+mesh_name)}

      _Bed_Heat_Saturate
      BED_MESH_CALIBRATE_BASE PROFILE={mesh_name} mesh_min={area_x_min},{area_y_min} mesh_max={area_x_max},{area_y_max} probe_count={probePointsX},{probePointsY} samples={sample_count|int} algorithm={algorithm}

      SAVE_VARIABLE VARIABLE=pre_print_mesh_name VALUE='"Adaptive"'

    {% else %}

      {% if debugF %} {action_respond_info("BMC: first bound check: false")} {% endif %}
      _Bed_Heat_Saturate
      BED_MESH_CALIBRATE_BASE PROFILE={mesh_name} probe_count={probePointsX},{probePointsY} samples={sample_count|int}
    {% endif %}

  {% else %}
    {% if debugF %} {action_respond_info("BMC: no params")} {% endif %}
    _Bed_Heat_Saturate
    BED_MESH_CALIBRATE_BASE PROFILE="{mesh_name}" probe_count={probePointsX},{probePointsY} samples={sample_count|int} 
  {% endif %}

  _Lg TYPE="posi" MSG="BMC ended."

  _MoveToBedMidpoint