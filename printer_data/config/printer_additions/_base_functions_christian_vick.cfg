;  Base Modul
;  Part of CV's Klipper Printer Additions.
;   
;  â€¢ The Base Functions modul is required to use any of the Printer Additions functionality. It offers various core functionality, used by other modules.
;  
;  
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

[respond]

[include _preprint_endprint_christian_vick.cfg] ; For any Klipper Printer. Everything a printer should do before the actual print starts.
[include preprint_priming_cleaning_christian_vick.cfg] ; For any Klipper Printer. Priming & Cleaning.

[gcode_macro _eierlikoertorte]
description: 
gcode:

[gcode_macro Mesh_Heat_Saturate]
description: KPA Button. Heats the bed, then waits for x minutes, to let the bed's shape more stabilize. 
gcode:
  {% set myname = "Mesh_Heat_Saturate" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set inp = params.WAIT_MINUTES|default(-1)|float %}

  {% if inp != -1 %} 
    {% set pre = "SET: " %}

  {% elif varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}
    {% set inp = psv.pre_print_heat_bed_saturate_minutes %}

  {% else %} 
    {% set pre = "RESET: " %}
    {% set inp = 0 %}

  {% endif %}

  {% set minp = "No " if (inp == 0) else (inp|string + " minute") %}
  {% set minp = minp+"s" if (inp != 1 and inp != 0) else minp %}

  {% set m = pre + minp + " heat saturation for the bed.

  INFO:
  Heats the bed, then waits for x minutes, to let the bed's shape more stabilize. It may also help to stabilise the temperature drift of a probe. Use this in case you did all standard troubleshooting, but still have first layer problems.

  HOW TO:
  â€¢ Click the arrow on the button to enter a saturate delay.
  â€¢ Try 3 minutes, and if you still have problems, raise in 3-minute-steps, up to 12 minutes. There's no rule for a correct time, as every bed / probe acts different.
  â€¢ Click this button again within 5 seconds, to turn the delay off." %}

  {action_respond_info(m)}

  {% if ("SET" in pre) %} 
    SAVE_VARIABLE VARIABLE=pre_print_heat_bed_saturate_minutes VALUE={inp}
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro _varis]

description: Running this macro does nothing - it is just a variable-container. Do not edit this! These are not user preferences - and these values change! 

variable_kpa_version: '3.0b9.1'
variable_loaded_module:[] 
variable_loaded_module_printer:[]
;["posi", "move", "prime", "flow", "conf", "value", "mesh", "param", "periph", "heat"]
variable_to_log_types: [] 

variable_button_clicked_name:''

variable_axis_x_pos_min: 0
variable_axis_x_pos_max: 302
variable_axis_y_pos_min: 0
variable_axis_y_pos_max: 305
variable_axis_z_pos_max: 343
variable_z_home_pos_x: 0
variable_z_home_pos_y: 0
variable_z_tilt_pos_start_x: 0
variable_z_tilt_pos_start_y: 0
variable_probe_offset_x:0
variable_probe_offset_y:0

variable_able_gantry_calibrate_f:False
variable_able_ztilt_gantry_calibrate_f:False
variable_able_quad_gantry_calibrate_f:False
variable_drivercurrent_z:0

variable_move_mms_max: 200
variable_move_mms_norm: 50

variable_temperature_bed_max:110.0
variable_temperature_nozzle_max:305.0

variable_meshloadcount:0
variable_mesh_probe_point_count_x:7
variable_mesh_probe_point_count_y:7
variable_mesh_probe_count_distance_default:37

variable_bed_temp:0

variable_bed_prime_count:-1

variable_print_slowdown_heightstart:'auto'
variable_print_slowdown_heightend:'slicer'
variable_print_slowdown_heightend_slicer:-1
variable_print_slowdown_percent:'auto'
variable_print_slowdown_percent_last:0
variable_will_print_slowdown_f:False

variable_slow_filaments:['TPU'] 

variable_mcu_temp_last:0
variable_mcu_rpm_percent_last:0

variable_nozzle_diameter:0.4 

gcode:

[gcode_macro _Printer_Capabilities]
gcode:

  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  {% set xmin = 0.0 if (printer.configfile.config.stepper_x.position_min is not defined) else printer.configfile.config.stepper_x.position_min|float %}
  _Lg TYPE="conf" MSG="_Printer_Capabilities: xmin:{xmin}"
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=axis_x_pos_min VALUE={xmin}

  {% set ymin = 0.0 if (printer.configfile.config.stepper_y.position_min is not defined) else printer.configfile.config.stepper_y.position_min|float %}
  _Lg TYPE="conf" MSG="_Printer_Capabilities: ymin:{ymin}"
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=axis_y_pos_min VALUE={ymin}

  {% if printer.configfile.config.stepper_x.position_max is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: stepper_x.position_max")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=axis_x_pos_max VALUE={printer.configfile.config.stepper_x.position_max|float}
  {% endif %}

  {% if printer.configfile.config.stepper_y.position_max is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: stepper_y.position_max")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=axis_y_pos_max VALUE={printer.configfile.config.stepper_y.position_max|float}
  {% endif %}

  {% if printer.configfile.config.stepper_z.position_max is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: stepper_z.position_max")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=axis_z_pos_max VALUE={printer.configfile.config.stepper_z.position_max|float}
  {% endif %}

  {% if printer.configfile.settings.heater_bed.max_temp is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: heater_bed.max_temp")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=temperature_bed_max VALUE={printer.configfile.settings.heater_bed.max_temp}
  {% endif %}

  {% if printer.configfile.settings.extruder.max_temp is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: extruder.max_temp")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=temperature_nozzle_max VALUE={printer.configfile.settings.extruder.max_temp}
  {% endif %}

  {% if printer.configfile.config.bed_mesh is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: bed_mesh")}
  {% elif printer.configfile.config.bed_mesh.probe_count is not defined %}
    {action_emergency_stop("The printer.cfg misses a configuration: bed_mesh.probe_count")}
  {% else %}
    _Mesh_Probe_Point_Count_Set
  {% endif %}

  {% if printer.configfile.config.safe_z_home is not defined %}
    RESPOND TYPE=error MSG="The printer.cfg misses a configuration: safe_z_home. We will use 0,0."
  {% elif printer.configfile.config.safe_z_home.home_xy_position is not defined %}
    RESPOND TYPE=error MSG="The printer.cfg misses a configuration: safe_z_home.home_xy_position. We will use 0,0."
  {% else %}
    {% set ret = printer.configfile.config.safe_z_home.home_xy_position|string %}
    {% set x = ret.split(",")[0]|float %}
    {% set y = ret.split(",")[1]|float %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=z_home_pos_x VALUE={x}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=z_home_pos_y VALUE={y}
  {% endif %}

  {% if printer.configfile.config.z_tilt is not defined %}

  {% elif printer.configfile.config.z_tilt.points is not defined %}

  {% else %}
    {% set di_ztilt = printer.configfile.config.z_tilt %}
    {% if di_ztilt|length > 0 %}

      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=able_gantry_calibrate_f VALUE=True
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=able_ztilt_gantry_calibrate_f VALUE=True

      {% set ret = printer.configfile.config.z_tilt.points|string %}
      {% set ret = ret.splitlines()[0] %}
      {% set ret = ret.split(", ") %}
      {% set x = ret[0]|float %}
      {% set y = ret[1]|float %}
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=z_tilt_pos_start_x VALUE={x}
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=z_tilt_pos_start_y VALUE={y}
    {% endif %}
  {% endif %}

  {% if printer.configfile.config.quad_gantry_level is not defined %}

  {% else %}
    {% set di_quad = printer.configfile.config.quad_gantry_level %}
    {% if di_quad|length > 0 %}

      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=able_gantry_calibrate_f VALUE=True
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=able_quad_gantry_calibrate_f VALUE=True
    {% endif %}
  {% endif %}

  {% if printer.configfile.settings.printer.max_velocity is not defined %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=move_mms_max VALUE=50
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=move_mms_norm VALUE=50
  {% else %}
    {% set ms = printer.configfile.settings.printer.max_velocity %}

    {% set maxi = ((ms * 0.90)|int) if ms >= 100 else ms %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=move_mms_max VALUE={maxi}

    {% set norm = ((ms * 0.50)|int) if ms >= 100 else ms %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=move_mms_norm VALUE={norm}
  {% endif %}

  {% if printer.configfile.config.extruder is defined %}
    {% if printer.configfile.config.extruder.nozzle_diameter is defined %}
      {% set nozDia = printer.configfile.config.extruder.nozzle_diameter|float %}
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=nozzle_diameter VALUE={nozDia}

    {% endif %}
  {% endif %}

[delayed_gcode _Startup_Check]
initial_duration: 4 
gcode:

  M117 Klipper Printer Additions Startup Check... 

  {% if not (printer.configfile.config.save_variables is defined) %}
    {action_emergency_stop("Klipper Printer Additions: Your printer configuration has not defined where to save variables. Nothing can work correctly without.

    Copy the following TWO lines into your printer.cfg file:

    [save_variables]
    filename: ~/printer_data/config/saved_variables.cfg

    You probably need to adapt the path. It should be the same directory where your 'printer.cfg' file is located.

    If you have an SV07 with old firmware, you may also update the firmware to solve the issue. 
    ")}
  {% endif %}

  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set msg_a = "KPA - Klipper Printer Additions v" + varis.kpa_version + "

  HOW TO USE THE KPA BUTTONS
  --------------------------
  â€¢ First click:
  Shows the Button's Status / Guide in the Console.
  â€¢ Further click(s) within 5 seconds:
  Toggle a Setting, or other Actions.
  The button will tell you what exactly happens.

  Module loaded
  -------------" %}
  {% set msg_b = varis.loaded_module|sort()|join('\n') %}
  {% set msg = msg_a + "\n" + msg_b + "\n" %}

  {% set msg = msg + "----- PRINTER Modules -----\n" %}

  {% set pre = "No PRINTER module loaded (not a requirement).\n" if varis.loaded_module_printer|length == 0 else varis.loaded_module_printer|sort()|join('\n') + "\n" %}
  {% set msg = msg + pre + "Always only enable PRINTER modules which are for your printer model!" %}

  {action_respond_info(msg)}

  {% if psv.z_kpa_version is defined %}
    {% set curVersion = varis.kpa_version %}
    {% set userVersion = psv.z_kpa_version %}

    {% if userVersion.startswith("2.") or userVersion is in ["3.0a1", "3.0a2", "3.0a3"] %}
      RESPOND TYPE=error MSG="NOTE: All buttons have been re-worked in version 3, and some renamed. If you have the KPA-buttons organized into categories, please re-add them to your categories, to make them visible again. The Update Guide lists all new/changed button names."
    {% endif %}

    {% if userVersion.startswith("2.") or "3.0a" is in userVersion or userVersion is in ["3.0b1", "3.0b2"] %}
      RESPOND TYPE=error MSG="NOTE: You must re-adjust your z-level. Details are the Update Guide, contained in the KPA download."
    {% endif %}

  {% endif %}

  {% set li = varis.loaded_module|sort() + varis.loaded_module_printer|sort() %}

  SAVE_VARIABLE VARIABLE=z_kpa_module_loaded  VALUE="{li}"
  SAVE_VARIABLE VARIABLE=z_kpa_version        VALUE='"{varis.kpa_version}"'

  {% if psv.debugF is not defined %} SAVE_VARIABLE VARIABLE=debugF VALUE=False {% endif %} 

  {% if psv.pre_print_gantry_calibrate_f is not defined %}  SAVE_VARIABLE VARIABLE=pre_print_gantry_calibrate_f  VALUE=True {% endif %} 

  {% if psv.pre_print_mesh_mode is not defined %}           SAVE_VARIABLE VARIABLE=pre_print_mesh_mode           VALUE='"multiple"' {% endif %} 

  {% if psv.pre_print_mesh_probe_point_distance is not defined %}    SAVE_VARIABLE VARIABLE=pre_print_mesh_probe_point_distance    VALUE=37 {% endif %}

  {% if psv.pre_print_mesh_name                 is not defined %}    SAVE_VARIABLE VARIABLE=pre_print_mesh_name           VALUE='""' {% endif %}

  {% if psv.print_is_running_f is not defined %}

    SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=False
  {% endif %}

  {% if psv.pre_print_heat_bed_saturate_minutes is not defined %}
    SAVE_VARIABLE VARIABLE=pre_print_heat_bed_saturate_minutes VALUE=0
  {% endif %}

  {% if psv.pre_print_prime_flowrate_spiral is not defined %}
    SAVE_VARIABLE VARIABLE=pre_print_prime_flowrate_spiral VALUE=7.5 
  {% endif %}
  {% if psv.pre_print_prime_flowrate_line is not defined %}
    SAVE_VARIABLE VARIABLE=pre_print_prime_flowrate_line VALUE=3 
  {% endif %}

  {% if psv.pre_print_mesh_mode is not in ["multiple", "adaptive"] %}
    SAVE_VARIABLE VARIABLE=pre_print_mesh_mode VALUE='"multiple"'
  {% endif %}

  _Printer_Capabilities

  {% if not printer.configfile.config.bed_mesh %}
    {action_emergency_stop("Klipper Printer Additions: Your printer configuration has not defined [bed_mesh]. Nothing can work correctly without.")}

  {% elif (not printer.configfile.config.bed_mesh.mesh_min) or (not printer.configfile.config.bed_mesh.mesh_max) %}
    {action_emergency_stop("Klipper Printer Additions: Your printer configuration has not defined [bed_mesh]: mesh_min / mesh_max. Nothing can work correctly without.")}

  {% else %}
    {% set mesh_min_x = printer.configfile.config.bed_mesh.mesh_min.split(",")[0]|float %}
    {% set mesh_max_x = printer.configfile.config.bed_mesh.mesh_max.split(",")[0]|float %}
    {% set mesh_min_y = printer.configfile.config.bed_mesh.mesh_min.split(",")[1]|float %}
    {% set mesh_max_y = printer.configfile.config.bed_mesh.mesh_max.split(",")[1]|float %}

    {% set stepper_min_x = 0 if not printer.configfile.config.stepper_x.position_min else printer.configfile.config.stepper_x.position_min|float %} 
    {% set stepper_max_x = printer.configfile.config.stepper_x.position_max|float %}

    {% set stepper_min_y = 0 if not printer.configfile.config.stepper_y.position_min else printer.configfile.config.stepper_y.position_min|float %} 
    {% set stepper_max_y = printer.configfile.config.stepper_y.position_max|float %}

    {% set probe_offset_x = 777 %}
    {% set probe_offset_y = 777 %}

    {% if printer.configfile.settings.bltouch %}

      {% set probe_offset_x = printer.configfile.settings.bltouch.x_offset|float %}
      {% set probe_offset_y = printer.configfile.settings.bltouch.y_offset|float %}
    {% elif printer.configfile.settings.probe %}

      {% set probe_offset_x = printer.configfile.settings.probe.x_offset|float %}
      {% set probe_offset_y = printer.configfile.settings.probe.y_offset|float %}
    {% else %}
      RESPOND TYPE=error MSG="No Probe Data found in printer.cfg."
      _Exit_By_Provoked_Error
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=probe_offset_x VALUE={probe_offset_x}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=probe_offset_y VALUE={probe_offset_y}

    {% set nozPosPossible_min_x = mesh_min_x - probe_offset_x %}
    {% set nozPosPossible_max_x = mesh_max_x - probe_offset_x %}
    {% set nozPosPossible_min_y = mesh_min_y - probe_offset_y %}
    {% set nozPosPossible_max_y = mesh_max_y - probe_offset_y %}

    {% if "move" in varis.to_log_types %}
      {action_respond_info("mesh_min X probe position:"+mesh_min_x|string+" - probe offset X:("+probe_offset_x|string+")
      = "+(mesh_min_x - probe_offset_x)|string+" requestable nozzle position X.
      "+stepper_min_x|string+" is the minimum possible stepper x position")}

      {action_respond_info("mesh_max X probe position:"+mesh_max_x|string+" - probe offset X:("+probe_offset_x|string+")
      = "+(mesh_max_x - probe_offset_x)|string+" requestable nozzle position X.
      "+stepper_max_x|string+" is the maximum possible stepper x position")}

      {action_respond_info("mesh_min Y probe position:"+mesh_min_y|string+" - probe offset Y:("+probe_offset_y|string+")
      = "+(mesh_min_y - probe_offset_y)|string+" requestable nozzle position Y.
      "+stepper_min_y|string+" is the minimum possible stepper Y position")}

      {action_respond_info("mesh_max Y probe position:"+mesh_max_y|string+" - probe offset Y:("+probe_offset_y|string+")
      = "+(mesh_max_y - probe_offset_y)|string+" requestable nozzle position Y.
      "+stepper_max_y|string+" is the maximum possible stepper Y position")}
    {% endif %}

    {% if (nozPosPossible_min_x < stepper_min_x) or (nozPosPossible_max_x > stepper_max_x) or (nozPosPossible_min_y < stepper_min_y) or (nozPosPossible_max_y > stepper_max_y) %}

      RESPOND TYPE=error MSG="Note: You will likely run into \"move out of range\" errors, as your printer.cfg contains unplausible parameter-values for the X coordinates of the probe / bed_mesh. Often this is caused by a wrong configured probe-offset, but the other values could also be wrong."

      {% if nozPosPossible_min_x < stepper_min_x %}
        {action_respond_info("X-min Coordinate problem:
        mesh_min X probe position:"+mesh_min_x|string+" - ("+probe_offset_x|string+") probe offset X
        = "+(mesh_min_x - probe_offset_x)|string+" requestable nozzle move position X while...
        "+stepper_min_x|string+" is the minimum stepper X nozzle position.")}
      {% endif %}
      {% if nozPosPossible_max_x > stepper_max_x %}
        {action_respond_info("X-max Coordinate problem:
        mesh_max X probe position:"+mesh_max_x|string+" - ("+probe_offset_x|string+") probe offset X
        = "+(mesh_max_x - probe_offset_x)|string+" requestable nozzle move position X while...
        "+stepper_max_x|string+" is the maximum stepper X nozzle position.")}
      {% endif %}
      {% if nozPosPossible_min_y < stepper_min_y %}
        {action_respond_info("Y-min Coordinate problem:
        mesh_min Y probe position:"+mesh_min_y|string+" - ("+probe_offset_y|string+") probe offset Y
        = "+(mesh_min_y - probe_offset_y)|string+" requestable nozzle move position Y while...
        "+stepper_min_y|string+" is the minimum stepper Y nozzle position.")}
      {% endif %}
      {% if nozPosPossible_max_y > stepper_max_y %}
        {action_respond_info("Y-max Coordinate problem:
        mesh_max Y probe position:"+mesh_max_y|string+" - ("+probe_offset_y|string+") probe offset Y
        = "+(mesh_max_y - probe_offset_y)|string+" requestable nozzle move position Y while...
        "+stepper_max_y|string+" is the maximum stepper Y nozzle position.")}
      {% endif %}

    {% endif %}

  {% endif %}

  M117 

[gcode_macro _Module_loaded_add]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set name = params.NAME|default("No Module Name provided.")|string %}
  {% set version = params.VERSION|default("n/a")|string %}

  {% set name = (name + " " + version) if version != varis.kpa_version else name  %}
  {% set templi = printer["gcode_macro _varis"].loaded_module %}
  {% set foo = templi.append(name) %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=loaded_module VALUE="{templi}"

[gcode_macro _Module_loaded_printer_add]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set name = params.NAME|default("No Module Name provided.")|string %}
  {% set version = params.VERSION|default("n/a")|string %}

  {% set name = (name + " " + version) if version != varis.kpa_version else name  %}
  {% set templi = printer["gcode_macro _varis"].loaded_module_printer %}
  {% set foo = templi.append(name) %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=loaded_module_printer VALUE="{templi}"

[delayed_gcode _UI_Button_Clicked_Timer]
gcode:

  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=button_clicked_name VALUE='""'

[gcode_macro _UI_Button_Clicked]
gcode:

  {% set name = params.NAME|default("")|string %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=button_clicked_name VALUE='"{name}"'

  UPDATE_DELAYED_GCODE ID=_UI_Button_Clicked_Timer DURATION=5

[gcode_macro M140] 
rename_existing: M1000140
gcode:
  M1000140 {rawparams}
  {% set s = params.S|float %} 
  _Fan_Start_CPU
  M1000140 S{s}

[gcode_macro M104] 
rename_existing: M1000104
gcode:
  M1000104 {rawparams}
  {% set s = params.S|float %} 
  _Fan_Start_CPU

  {% set speed = 1 if (s > 0) else 0 %}

  {% set temp_perc = s*100/printer.configfile.config.extruder.max_temp|float %} 

  {% set speed = (temp_perc/100) + 0.0 %} 

  {% set speed = 1 if speed > 1 else speed %} 

  {% set speed = 0.5 if ((speed < 0.5) and (speed > 0)) else speed %} 

  _Fan_Start_Hotend SPEED={speed}
  M1000104 S{s}

[gcode_macro _Fan_Start_CPU]

gcode:
  {% if printer["gcode_macro _Fan_Start_CPU_Printer_Specific"] is defined %}
    _Fan_Start_CPU_Printer_Specific
  {% endif %}

[gcode_macro _Fan_Start_Hotend]

gcode:
  {% set speed = params.SPEED|default(1)|float %}

  {% if printer["gcode_macro _Fan_Start_Hotend_Printer_Specific"] is defined %}
    _Fan_Start_Hotend_Printer_Specific SPEED={speed}
  {% endif %}

[gcode_macro _HeatFast_Wait_Bed]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set tempTarget = params.TEMPTARGET|default(-11)|float %}

  {% set msg = params.MSG|default("")|string %}
  {% set tempMin = params.TEMPMIN|default(0)|float %}
  {% set tempMax = params.TEMPMAX|default(130)|float %}

  {% if tempTarget == -11 %} RESPOND TYPE=error MSG="Schussel-Error bei _HeatFast_Wait_Bed!" {% endif %}

  {% if msg != "" %} RESPOND TYPE=command MSG="{msg}" {% endif %}

  {% if tempTarget >= (varis.temperature_bed_max-3)  %}
    RESPOND TYPE=error MSG="Fast Heater: Bed can only reach a temperature of {varis.temperature_bed_max}. Adjusting the temperature down a bit to avoid an ADC error..."
    {% set tempTarget = (varis.temperature_bed_max-3) %} 
  {% endif %}

  {% set temp_bed_overshoot = tempTarget + ((tempTarget-printer.heater_bed.temperature)*2) %}
  {% set temp_bed_overshoot = tempTarget if temp_bed_overshoot < tempTarget else temp_bed_overshoot %}

  {% set temp_bed_overshoot = tempTarget*1.17 if temp_bed_overshoot > (tempTarget*1.17) else temp_bed_overshoot %}

  {% set temp_bed_overshoot = (varis.temperature_bed_max-3) if temp_bed_overshoot > (varis.temperature_bed_max-3) else temp_bed_overshoot %}

  {% set tempMin = (varis.temperature_bed_max-4) if tempMin >= (varis.temperature_bed_max-4) else tempMin %}

  {% if tempTarget > 0 %}

    M140 S{temp_bed_overshoot}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={tempMin}

    {% if (tempTarget > 40) %} 
      M140 S0
      TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={tempMax}

    {% elif printer.heater_bed.temperature > 40 %} 
      RESPOND TYPE=error MSG="Fast Heater: The bed target temperature is in the range of a possible room temperature (up to 40Â°C). Therefore we will not wait for the bed to fall down to {tempTarget}Â°C, because it possibly can't. But we will wait for the bed to fall down to 40Â°C..."
      M140 S0
      TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=40
    {% endif %}

    M140 S{tempTarget}
  {% endif %}

[gcode_macro _HeatFast_Wait_Nozzle]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set tempTarget = params.TEMPTARGET|default(-11)|float %}
  {% set msg = params.MSG|default("")|string %}
  {% set tempMin = params.TEMPMIN|default(0)|float %}
  {% set tempMax = params.TEMPMAX|default(330)|float %}

  {% if tempTarget == -11 %} RESPOND TYPE=error MSG="Schussel-Error bei _HeatFast_Wait_Nozzle!" {% endif %}

  {% if msg != "" %} RESPOND TYPE=command MSG="{msg}" {% endif %}

  {% if tempTarget > (varis.temperature_nozzle_max-5)  %}
    RESPOND TYPE=error MSG="Fast Heater: Extruder can only reach a temperature of {varis.temperature_nozzle_max}. Adjusting the temperature down a bit to avoid an ADC error..."
    {% set tempTarget = (varis.temperature_nozzle_max-5) %} 
  {% endif %}

  {% set temp_nozzle_overshoot = tempTarget + (tempTarget-printer.extruder.temperature/3|int) %}
  {% set temp_nozzle_overshoot = tempTarget if temp_nozzle_overshoot < tempTarget else temp_nozzle_overshoot %}

  {% set temp_nozzle_overshoot = tempTarget+15 if temp_nozzle_overshoot > (tempTarget+15) else temp_nozzle_overshoot %}

  {% set temp_nozzle_overshoot = (varis.temperature_nozzle_max-5) if temp_nozzle_overshoot > (varis.temperature_nozzle_max-5) else temp_nozzle_overshoot %}

  {% set tempMin = (varis.temperature_nozzle_max-10) if tempMin >= (varis.temperature_nozzle_max-10) else tempMin %}

  {% if tempTarget > 0 %}
    M104 S{temp_nozzle_overshoot}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={tempMin}
    M104 S0 
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={tempMax}
    M104 S{tempTarget}
  {% endif %}

[gcode_macro _Wait]
gcode:
  {% set seconds = params.SECONDS|default(1)|float%}
  G4 P{seconds*1000}

[gcode_macro _Bed_Heat_Saturate]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set waitMinutes = psv.pre_print_heat_bed_saturate_minutes %}

  {% if waitMinutes > 0 %}
    {% set plural = "s" if (waitMinutes != 1) else ""%}
    RESPOND TYPE=command MSG="Bed Heat Saturate: Waiting {waitMinutes} minute{plural} for a more stable probe and bed surface..."
    _MoveToBedMidpoint SPEED=5
    _Wait SECONDS={60*waitMinutes}
    RESPOND TYPE=command MSG="Bed Heat Saturate: Finished."
  {% endif %}

[gcode_macro _Exit_By_Provoked_Error]
gcode:
  {% set msg = params.MSG|default("")|string %}
  _End_Print_KPA
  {% set foo = 0/0 %}

[gcode_macro _Lg]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}

  {% set typ = params.TYPE|default("")|string %}
  {% set msg = params.MSG|default("")|string %}

  {% if typ in varis.to_log_types %}
    {action_respond_info("debugâ€¢"+typ+": "+msg)}
    {% if typ == "posi" %} _LgCoordinates {% endif %}
  {% endif %}

[gcode_macro _LgCoordinates]

gcode:

  {% set pmr = printer.motion_report.live_position %}
  {action_respond_info("debug: "+pmr|string)}

  GET_POSITION

[gcode_macro _Probe_Prepare]
gcode:

[gcode_macro _Probe_End]
gcode:

[gcode_macro _Gantry_Calibrate]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if printer["gcode_macro _Gantry_Calibrate_PrinterSpecific"] is defined %}
    _Gantry_Calibrate_PrinterSpecific
  {% else %}
    {% if varis.able_ztilt_gantry_calibrate_f %} 
      RESPOND TYPE=command MSG="Z-Tilt..."
      Z_TILT_ADJUST
    {% elif varis.able_quad_gantry_calibrate_f %} 
      RESPOND TYPE=command MSG="Quad Gantry Level..."
      QUAD_GANTRY_LEVEL
    {% endif %}
  {% endif %}

[gcode_macro _Gantry_Calibration_Mechanical]
gcode:

  {% set varis = printer["gcode_macro _varis"] %}

  {% set z_endpoint = params.Z_ENDPOINT|default(0)|int %}
  {% set mm_to_raise = params.MM_TO_RAISE|default(1)|int %}
  {% set driver_percent = params.DRIVER_PERCENT|default(0)|int %}
  {% set withLowDriverCurrentF = 0 %}

  {% if driver_percent > 0 and varis.drivercurrent_z > 0 %}
    {% set withLowDriverCurrentF = 1 %}
  {% endif %}  

  {% if z_endpoint > 10 %}
    _Home_XYZ_IfNotHomed

    G1 Z{z_endpoint}

    {% set z_below = (z_endpoint-20) %}
    SET_KINEMATIC_POSITION Z={z_below} 

    {% if (withLowDriverCurrentF == 1) %} 
      {% set lowCurrent = (varis.drivercurrent_z * (driver_percent/100)) %}

      _Lg TYPE="periph" MSG="withLowDriverCurrentF:{withLowDriverCurrentF} varis.drivercurrent_z:{varis.drivercurrent_z} driver_percent:{driver_percent} z_endpoint:{z_endpoint} mm_to_raise:{mm_to_raise} lowCurrent:{lowCurrent} varis.axis_z_pos_max:{varis.axis_z_pos_max}"

      SET_TMC_CURRENT STEPPER="stepper_z" CURRENT={lowCurrent}

      G1 Z{z_below + mm_to_raise}

    {% else %}

      {% set raisecount = mm_to_raise *10 %} 

      {% for i in range(raisecount) %}

        {% set z_raise = z_below + (i/10) %}

        G1 Z{z_raise}
        G4 P60
      {% endfor %}
    {% endif %}

    SET_KINEMATIC_POSITION Z={z_endpoint-20} 

    G1 Z20  

    {% if (withLowDriverCurrentF == 1) %}
      SET_TMC_CURRENT STEPPER="stepper_z" CURRENT={varis.drivercurrent_z}
    {% endif %}

    G28 Z   
  {% endif %}

[gcode_macro _PrintStopped_SaveConfig]
gcode:
  {% set psv = printer.save_variables.variables %}

  {% set msg = params.MSG|default("")|string %}
  {% if msg != "" %} RESPOND TYPE=error MSG="Print stopped. Saving configuration, restarting. Ignore the following error messages..." {% endif %}
  _Wait SECONDS=7

  {% if printer["gcode_macro _PrintStopped_SaveConfig_PrinterSpecific"] is defined %} _PrintStopped_SaveConfig_PrinterSpecific
  {% endif %}

  SAVE_CONFIG

[gcode_macro _Mesh_Probe_Point_Count_Set]
gcode:
  {% set debugF = True %}

  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set pc = printer.configfile.config.bed_mesh.probe_count %} 

  {% if pc.split(",")|length == 2 %}
      {% set pcfg_meshPointX = pc.split(",")[0]|int %}
      {% set pcfg_meshPointY = pc.split(",")[1]|int %}
  {% else %}
      {% set pcfg_meshPointX = pc.split(",")[0]|int %}
      {% set pcfg_meshPointY = pcfg_meshPointX %}
  {% endif %}

  {% set bedMeshConfig = printer.configfile.config.bed_mesh %}
  {% set bmSave_X_min = bedMeshConfig.mesh_min.split(",")[0]|float %}
  {% set bmSave_Y_min = bedMeshConfig.mesh_min.split(",")[1]|float %}
  {% set bmSave_X_max = bedMeshConfig.mesh_max.split(",")[0]|float %}
  {% set bmSave_Y_max = bedMeshConfig.mesh_max.split(",")[1]|float %}

  {% set probableLength_X = (bmSave_X_max - bmSave_X_min)|int %}
  {% set probableLength_Y = (bmSave_Y_max - bmSave_Y_min)|int %}

  {% set p_distance = psv.pre_print_mesh_probe_point_distance %}
  {% if p_distance == 0 %}
    {% set meshPointX = pcfg_meshPointX %}
    {% set meshPointY = pcfg_meshPointY %}
  {% else %}
    {% set meshPointX = (probableLength_X / p_distance)|round(0)|int %}
    {% set meshPointY = (probableLength_Y / p_distance)|round(0)|int %}
  {% endif %}

  {% set meshPointX = 3 if meshPointX < 3 else meshPointX %}
  {% set meshPointY = 3 if meshPointY < 3 else meshPointY %}

  {% set meshPointX = meshPointY if (meshPointX+1) == meshPointY else meshPointX %}
  {% set meshPointY = meshPointX if (meshPointY+1) == meshPointX else meshPointY %}

  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=mesh_probe_point_count_x VALUE={meshPointX}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=mesh_probe_point_count_y VALUE={meshPointY}

[gcode_macro _PPActionFlow_PrintStart_Init_Before]
gcode:
  {% if printer["gcode_macro _PPActionFlow_PrintStart_Init_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_PrintStart_Init_Before_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_PrintStart_Init_After]
gcode:
  {% if printer["gcode_macro _PPActionFlow_PrintStart_Init_After_PrinterSpecific"] is defined %}
    _PPActionFlow_PrintStart_Init_After_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_PrintStartTextOutput_Before]
gcode:
  {% if printer["gcode_macro _PPActionFlow_PrintStartTextOutput_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_PrintStartTextOutput_Before_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_PrintStartTextOutput_After]
gcode:
  {% if printer["gcode_macro _PPActionFlow_PrintStartTextOutput_After_PrinterSpecific"] is defined %}
    _PPActionFlow_PrintStartTextOutput_After_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_HeatBedInitial_Before]
gcode:
  {% if printer["gcode_macro _PPActionFlow_HeatBedInitial_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_HeatBedInitial_Before_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_HeatBedInitial]
gcode:
  {% set temp_bed =                  params.TEMP_BED|default(0)|float %}
  {% set temp_bed_overshoot =        params.TEMP_BED_OVERSHOOT|default(0)|float %}
  {% set temp_bed_overshoot_slight = params.TEMP_BED_OVERSHOOT_SLIGHT|default(0)|float %}

  {% if printer["gcode_macro _PPActionFlow_HeatBedInitial_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_HeatBedInitial_Before_PrinterSpecific TEMP_BED=temp_bed TEMP_BED_OVERSHOOT=temp_bed_overshoot TEMP_BED_OVERSHOOT_SLIGHT=temp_bed_overshoot_slight

  {% else %}

    {% if (printer.heater_bed.temperature > (temp_bed*1.05)) and (printer.heater_bed.temperature > 40) %}

      M140 S0
      _HeatFast_Wait_Bed TEMPTARGET={temp_bed} TEMPMAX={temp_bed*1.05} MSG="Bed too hot: Waiting for the bed temperature to drop to {"%.1f"|format(temp_bed*1.05|float)}Â°C......"
      M140 S{temp_bed}

    {% elif printer.heater_bed.temperature < (temp_bed*0.80) %}

      M140 S{temp_bed_overshoot_slight} 
    {% else %}
      M140 S{temp_bed} 
    {% endif %}

  {% endif %}

[gcode_macro _PPActionFlow_HeatBedInitial_After]
gcode:
  {% if printer["gcode_macro _PPActionFlow_HeatBedInitial_After_PrinterSpecific"] is defined %} 
    {% set varis = printer["gcode_macro _varis"] %}
    M140 S{varis.bed_temp} 
    _PPActionFlow_HeatBedInitial_After_PrinterSpecific

    M140 S{varis.bed_temp*1.01}
  {% endif %}

[gcode_macro _PPActionFlow_FirstHoming_Before]
gcode:
  {% if printer["gcode_macro _PPActionFlow_FirstHoming_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_FirstHoming_Before_PrinterSpecific
  {% endif %}

[gcode_macro _Home_XYZ_IfNotHomed]
gcode:

  {% if printer["gcode_macro _Home_XYZ_IfNotHomed_PrinterSpecific"] is defined %}
    _Home_XYZ_IfNotHomed_PrinterSpecific 
  {% else %}
    {% if not ("xyz" in printer.toolhead.homed_axes) %}
      RESPOND TYPE=command MSG="Homing XYZ..."
      G28     
    {% endif %}
  {% endif %}

[gcode_macro _PPActionFlow_FirstHoming_After]
gcode:
  {% if printer["gcode_macro _PPActionFlow_FirstHoming_After_PrinterSpecific"] is defined %}
    _PPActionFlow_FirstHoming_After_PrinterSpecific
  {% endif %}

[gcode_macro _Home_Z]
gcode:
  {% if printer["gcode_macro _Home_Z_PrinterSpecific"] is defined %}
    _Home_Z_PrinterSpecific
  {% else %}
    {action_respond_info("Homing Z...")}
    G28 Z
  {% endif %}

[gcode_macro _PPActionFlow_HeatNozzleInitial_Before]
gcode:
  {% if printer["gcode_macro _PPActionFlow_HeatNozzleInitial_Before_PrinterSpecific"] is defined %}
    _PPActionFlow_HeatNozzleInitial_Before_PrinterSpecific
  {% endif %}

[gcode_macro _PPActionFlow_HeatNozzleInitial]

gcode:
  {% set temp_nozzle = params.TEMP_NOZZLE|default(0)|float %}

  {% if printer["gcode_macro _PPActionFlow_HeatNozzleInitial_PrinterSpecific"] is defined %}
    _PPActionFlow_HeatNozzleInitial_PrinterSpecific TEMP_NOZZLE=temp_nozzle

  {% else %}
    M104 S{temp_nozzle}
  {% endif %}

[gcode_macro _PPActionFlow_HeatNozzleInitial_After]
gcode:
  {% if printer["gcode_macro _PPActionFlow_HeatNozzleInitial_After_PrinterSpecific"] is defined %}
    _PPActionFlow_HeatNozzleInitial_After_PrinterSpecific
  {% endif %}

[gcode_macro _MoveToCleaningNozzleBedPosition]

gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  {% if psv.pre_print_moves_cleaning_f %}
    {% set msg = params.MSG|default("Opportunity to clean the nozzle / bed...")|string %}
    {% set z = params.Z|default(60)|int %}

    {% if printer["gcode_macro _MoveToCleaningNozzleBedPosition_PrinterSpecific"] is defined %}
      _MoveToCleaningNozzleBedPosition_PrinterSpecific MSG=msg Z=z
    {% else %}
      RESPOND TYPE=command MSG="{msg}" 

      {% set park_x = varis.axis_x_pos_min +1 %}
      {% set park_y = varis.axis_y_pos_max -1 %}

      _Lg TYPE="posi" MSG="_MoveToCleaningNozzleBedPosition: park_x:{park_x} park_y:{park_y}"

      G1 X{park_x} Y{park_y} F{varis.move_mms_norm*60}

      G1 Z{z} F{15*60}
    {% endif %}

  {% endif %}

[gcode_macro _Move_Speed_Set]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}

  {% set mms = params.MMS|default(50)|int %}

  M400 

  {% set moveDistance = 0.1 %}

  {% set curposx1 = printer.toolhead.position.x|float %}

  {% set moveDir = (-moveDistance) if (curposx1 + moveDistance+1) >= varis.axis_x_pos_max else moveDistance %} 

  _Lg TYPE="posi" MSG="_Move_Speed_Set: mms:{mms} curposx1:{curposx1} moveDir:{moveDir} = {curposx1 + moveDir}"

  G1 X{curposx1 + moveDir} F{mms*60}
  G1 X{curposx1} F{mms*60}

[gcode_macro _MoveToXYmin]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  _Lg TYPE="posi" MSG="_MoveToXYmin +1: {varis.axis_x_pos_min+1}/{varis.axis_y_pos_min+1}"

  G1 X{varis.axis_x_pos_min+1} Y{varis.axis_y_pos_min+1} F{varis.move_mms_norm*60} 

[gcode_macro _MoveToBedMidpoint]
gcode:

  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  {% set speed = params.SPEED|default(50)|int%}

  {% set curX = printer.toolhead.position.x|float %}
  {% set curY = printer.toolhead.position.y|float %}

  {% set xTar = (varis.axis_x_pos_max / 2) -varis.probe_offset_x %}
  {% set yTar = (varis.axis_y_pos_max / 2) -varis.probe_offset_y %}
  {% set xDiff = (curX - xTar)|abs %}
  {% set yDiff = (curY - yTar)|abs %}
  _Lg TYPE="posi" MSG="_MoveToBedMidpoint: xTar:{xTar} yTar:{yTar} z_home_pos_x:{varis.z_home_pos_x} z_home_pos_y:{varis.z_home_pos_y} xBedMidPoint:{(varis.axis_x_pos_max / 2)} yBedMidPoint:{(varis.axis_y_pos_max / 2)} xDiff:{xDiff} yDiff:{yDiff}"
  {% if xDiff > 50 or yDiff > 50 %}
    G1 X{xTar}   Y{yTar}   F{60*speed}
  {% endif %}

[gcode_macro _MoveToGantryCalibrateStartPosition]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  {% set pos_x = varis.axis_x_pos_max / 2 %}
  {% set pos_y = varis.axis_y_pos_max / 2 %}

  {% if varis.able_quad_gantry_calibrate_f %}

  {% elif varis.able_ztilt_gantry_calibrate_f %}
    {% set pos_x = varis.z_tilt_pos_start_x %}
    {% set pos_y = varis.z_tilt_pos_start_y %}
    _Lg TYPE="posi" MSG="_MoveToGantryCalibrateStartPosition A: varis.axis_x_pos_max/2:{varis.axis_x_pos_max / 2}, varis.axis_y_pos_max/2:{varis.axis_y_pos_max / 2} varis.z_tilt_pos_start_x:{varis.z_tilt_pos_start_x}, varis.z_tilt_pos_start_y:{varis.z_tilt_pos_start_y}"
  {% endif %}

  G1 X{pos_x} Y{pos_y} F{varis.move_mms_norm*60}

  _Lg TYPE="posi" MSG="Inside _MoveToGantryCalibrateStartPosition, after move"

[gcode_macro _MoveToZhomeStart]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% set psv = printer.save_variables.variables %}

  _Lg TYPE="move" MSG="_MoveToZhomeStart: varis.z_home_pos_x:{varis.z_home_pos_x}, varis.z_home_pos_y:{varis.z_home_pos_y}"

  G1 X{varis.z_home_pos_x} Y{varis.z_home_pos_y} F{varis.move_mms_norm*60}

[gcode_macro _Move_Announce_User_Wiggle]

gcode:
  {% set varis = printer["gcode_macro _varis"] %}

  {% set xyz = params.XYZ|default("y")|string %}
  {% set frequency = params.FREQUENCY|default(0.3)|float %}
  {% set duration = params.DURATION|default(3)|float %}
  {% set speed = params.SPEED|default(100)|int %}

  {% set lp = (1/frequency*duration)|int %}

  {% if xyz == "y" %}

    {% set curpos = printer.toolhead.position.y|float %}

    _Lg TYPE="posi" MSG="_Move_Announce_User_Wiggle: curpos Y:{curpos}"

  {% set curpos = varis.axis_y_pos_max if curpos > varis.axis_y_pos_max else curpos %}
  {% set curpos = varis.axis_y_pos_min if curpos < varis.axis_y_pos_min else curpos %}
  {% endif %}

  {% if xyz == "x" %}
    {% set curpos = printer.toolhead.position.x|float %}

    _Lg TYPE="posi" MSG="_Move_Announce_User_Wiggle: curpos X:{curpos}"

  {% set curpos = varis.axis_x_pos_max if curpos > varis.axis_x_pos_max else curpos %}
  {% set curpos = varis.axis_x_pos_min if curpos < varis.axis_x_pos_min else curpos %}
  {% endif %}

  {% if curpos > 5 %}
    {% set wigpos = curpos-0.5 %}
  {% else %}
    {% set wigpos = curpos+0.5 %}
  {% endif %}

  _Lg TYPE="posi" MSG="_Move_Announce_User_Wiggle (after sanity): wigpos:{wigpos}, curpos:{curpos}"

  {% for i in range(lp) %}
    {% if xyz == "y" %} G1 Y{wigpos} F{varis.move_mms_norm*60} {% endif %}
    {% if xyz == "x"%}  G1 X{wigpos} {% endif %}
    G4 P{frequency/2*1000}   
    {% if xyz == "y" %} G1 Y{curpos} F{varis.move_mms_norm*60} {% endif %}
    {% if xyz == "x"%}  G1 X{curpos} {% endif %}
    G4 P{frequency/2*1000}
  {% endfor %}

  _Lg TYPE="posi" MSG="_Move_Announce_User_Wiggle: End"