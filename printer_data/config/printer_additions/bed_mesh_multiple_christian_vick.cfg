; Multiple Bed Meshes
; Part of CV's Klipper Printer Additions.
;   
;   
;   Support
;   â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;     If my work supports you, you might like to support me too.
;   â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;     
;     
;     When you buy something, please use my Referal-Link, at no additional cost:
;   â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;   â€¢ Amazon: https://amzn.to/3L35OX2
;     
;     Thank you!
;     Christian ðŸ™‚

[delayed_gcode _startup_check_mesh_multiple]
initial_duration: 2.02 
gcode:

  {% set module_version = "3.0b9.1" %} 
  _Module_loaded_add NAME="Bed Mesh Multiple" VERSION="{module_version}"

[gcode_macro Mesh_Probe_Point_Distance]
description: KPA Button. Set the desired distance of the probe points with which the bed meshes should be created.
gcode:
  {% set debugF = False %}

  {% set myname = "Mesh_Probe_Point_Distance" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set bedMeshConfig = printer.configfile.config.bed_mesh %}

  {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
      {% set pcfg_meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set pcfg_meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
  {% else %}
      {% set pcfg_meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set pcfg_meshPointY = pcfg_meshPointX %}
  {% endif %}

  {% set m_cfg = "" %}

  {% set bedMeshConfig = printer.configfile.config.bed_mesh %}
  {% set bmSave_X_min = bedMeshConfig.mesh_min.split(",")[0]|float %}
  {% set bmSave_Y_min = bedMeshConfig.mesh_min.split(",")[1]|float %}
  {% set bmSave_X_max = bedMeshConfig.mesh_max.split(",")[0]|float %}
  {% set bmSave_Y_max = bedMeshConfig.mesh_max.split(",")[1]|float %}
  {% if debugF %}
    {action_respond_info("Sampleable area:
    bmSave_X_min: "+bmSave_X_min|string+"
    bmSave_Y_min: "+bmSave_Y_min|string+"
    bmSave_X_max: "+bmSave_X_max|string+"
    bmSave_Y_max: "+bmSave_Y_max|string)}
  {% endif %}
  {% set probableLength_X = (bmSave_X_max - bmSave_X_min)|int %}
  {% set probableLength_Y = (bmSave_Y_max - bmSave_Y_min)|int %}

  {% set p_point_distance = params.DISTANCE_MM|default(-1)|float %}
  {% set p_point_count_x = params.PROBE_POINTS_X|default(-1)|int %}
  {% set meshPointY = 0 %}

  {% if p_point_count_x != -1 and p_point_distance != -1 %}
    RESPOND TYPE=error MSG="Please only enter one of the two values."
    {% set pre = "" %}

  {% elif p_point_count_x == 0 or p_point_distance == 0 %}
    {% set pre = "SET: Probe Point Count from printer.cfg." %}
    {% set p_point_count_x = pcfg_meshPointX %}
    {% set meshPointX = pcfg_meshPointX %}
    {% set meshPointY = pcfg_meshPointY %}
    {% set m_cfg = " (From printer.cfg)" %}

    {% set p_point_distance = (probableLength_X / meshPointX)|round(1)|float %}

  {% elif p_point_count_x >= 0 %}

    {% set pre = "SET: Probe Point Count X: " + p_point_count_x|string %}
    {% set meshPointX = p_point_count_x %}

    {% set p_point_distance = (probableLength_X / meshPointX)|round(1)|float %}

  {% elif p_point_distance >= 0 %}

    {% set pre = "SET: Probe Point Distance: " + p_point_distance|string + " mm." %}

  {% elif p_point_count_x == -1 and p_point_distance == -1 %}
    {% set p_point_distance = psv.pre_print_mesh_probe_point_distance %}
    {% set pre = "STATUS: Probe Point Distance: " + p_point_distance|string + " mm." %}
    _UI_Button_Clicked NAME={myname}
  {% endif %}

  {% set meshPointX = (probableLength_X / p_point_distance)|round(0)|int %}

  {% if meshPointY == 0 %}
  {% set meshPointY = (probableLength_Y / p_point_distance)|round(0)|int %}
  {% endif %}

  {% set meshPointX = 3 if meshPointX < 3 else meshPointX %}
  {% set meshPointY = 3 if meshPointY < 3 else meshPointY %}

  {% set p_point_distance = (probableLength_X / meshPointX)|round(1)|float %}

  {% set meshPointX = meshPointY if (meshPointX+1) == meshPointY else meshPointX %}
  {% set meshPointY = meshPointX if (meshPointY+1) == meshPointX else meshPointY %}

  {% if varis.button_clicked_name == myname %} 
    {% set pre = "RESET: Probe Point Distance: "+varis.mesh_probe_count_distance_default|string + " mm." %}
    {% set meshPointX = (probableLength_X / varis.mesh_probe_count_distance_default)|round(0)|int %}
    {% set meshPointY = (probableLength_Y / varis.mesh_probe_count_distance_default)|round(0)|int %}
    {% set meshPointX = 3 if meshPointX < 3 else meshPointX %}
    {% set meshPointY = 3 if meshPointY < 3 else meshPointY %}
    {% set p_point_distance = (probableLength_X / meshPointX)|round(1)|float %}

  {% else %} 

  {% endif %}

  {% if meshPointX and meshPointY and pre != "" %} 
    {% set m = pre + "

    HOW TO:
    â€¢ Enter the desired value in the input field (click the arrow).
    â€¢ Should you like to use the probe point count defined in printer.cfg, enter 0.
    â€¢ Click the button again within 5 seconds to reset the value to default.

    INFO:
    This is the distance between two probe points when a bed mesh is created. By default it is 37mm.
    You may enter instead the amount of probing points in X-direction. It will then calculate the distance, and the probe point count in Y.
    The probe point distance will be applied to Adaptive- and Multiple Mesh Mode.

    .........Sampleable Area Size XY: " + probableLength_X|string + "x" + probableLength_Y|string + "
    .......Real Probe Point distance: " + p_point_distance|string + m_cfg + "
    Probe Point Count in X direction: " + meshPointX|string + m_cfg + "
    Probe Point Count in Y direction: " + meshPointY|string + m_cfg + "
    ..............Total Probe Points: " + (meshPointX * meshPointY)|int|string %}

    {action_respond_info(m)}

    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=mesh_probe_point_count_x VALUE={meshPointX}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=mesh_probe_point_count_y VALUE={meshPointY}
    SAVE_VARIABLE VARIABLE=pre_print_mesh_probe_point_distance VALUE={p_point_distance}

  {% endif %}

[gcode_macro Mesh_Multiple_Mode]
description: KPA Button. Use multiple bed meshes in steps of 10Â°C, which are automatically used for upcoming prints, according to the bed's print temperature. Saves tons of time.
gcode:
  {% set myname = "Mesh_Multiple_Mode" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set mode = psv.pre_print_mesh_mode %}

  {% if varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}

  {% else %} 
    {% set pre = "SET: " %}
    {% set mode = "multiple" %}
    SAVE_VARIABLE VARIABLE=pre_print_mesh_mode VALUE='"{mode}"'

  {% endif %}

  {% set suff2 = "

  To switch to Multiple Mesh mode, click this button again within 5 seconds" %}

  {% if mode == "adaptive" %}
    {% set dmode = "OFF: Multiple Mesh Mode" %}

  {% elif mode == "multiple" %}
    {% set dmode = "ON: Multiple Mesh Mode" %}
    {% set suff2 = "" %}

  {% else %}
    {% set dmode = "Unknown mode: " + mode|string %}

  {% endif %}

  {% set m = pre + dmode + suff2 +"

  INFO:
  Multiple Mesh Mode provides the fastest way to start your prints. It automatically creates, saves & re-uses bed meshes. The saved meshes take all important factors into account:
  â€¢ Bed Temperature (up to +-5Â°C deviation is accepted)
  â€¢ Gantry Calibration Status
  â€¢ Probe Point Count" %}

  {action_respond_info(m)}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Mesh_Create_All_Temperatures]
description: KPA Button. Creates bed meshes in steps of 10Â°C, which can then be automatically used for upcoming prints, according to the bed's print temperature. 
gcode:
  {% set myname = "Mesh_Create_All_Temperatures" %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if varis.button_clicked_name != myname %} 
    {action_respond_info("INFO:
    This will (re)create multiple bed meshes for all print temperatures in one go.

    The meshes will be created in steps of 10Â°C. It will start with the temperature the bed currently has.

    When completed, the printer will save all meshes and restart automatically.

    HOW TO:
    Click this button again within 5 seconds, to start.")}

  {% else %} 
    _Mesh_Create_Calibrations_For_All_Temperatures
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Mesh_Create_For_Temperature]
description: KPA Button. (Re-)Create a bed mesh for the desired bed print temperature. It will be rounded to steps of 10Â°C. 
gcode:
  {% set myname = "Mesh_Create_For_Temperature" %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set temp = params.TEMPERATURE|default(0)|int %}

  {% if temp == 0 %} 
    {action_respond_info("INFO:
    This (re)creates a bed mesh which will be later re-used for printing. This is useful if you think a mesh isn't ok and needs re-creation.

    HOW TO:
    1) Please click the arrow on the button to enter the bed temperature for which the bed mesh shall be created. The temperature will be rounded to the nearest 10.

       You may create several bed meshes.

    2) Finally click SAVE_CONFIG to save the created mesh(es).")}

  {% else %}

    {% if temp > varis.temperature_bed_max %}
      RESPOND TYPE=error MSG="{temp}Â°C exceeds the maximum possible bed temperature of {varis.temperature_bed_max}Â°C"
    {% elif temp < 5 %}
      RESPOND TYPE=error MSG="{temp}Â°C is below the minimum possible bed temperature."
    {% else %}

      {% set temp_rounded = ((((temp+0.01)/10)|round(0)|int)*10)|int %} 

      {% if temp_rounded == 10 %}
        _Mesh_Create_For_010
      {% elif temp_rounded == 20 %}
        _Mesh_Create_For_020
      {% elif temp_rounded == 30 %}
        _Mesh_Create_For_030
      {% elif temp_rounded == 40 %}
        _Mesh_Create_For_040
      {% elif temp_rounded == 50 %}
        _Mesh_Create_For_050
      {% elif temp_rounded == 60 %}
        _Mesh_Create_For_060
      {% elif temp_rounded == 70 %}
        _Mesh_Create_For_070
      {% elif temp_rounded == 80 %}
        _Mesh_Create_For_080
      {% elif temp_rounded == 90 %}
        _Mesh_Create_For_090
      {% elif temp_rounded == 100 %}
        _Mesh_Create_For_100
      {% endif %}

    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro _Mesh_Create_For_010]
gcode:
  {% set temp = 10 %}
  {% set phbt = printer.heater_bed.temperature %}
  _Fan_Start_CPU

  _MultiMeshCreate TEMP={temp} STARTF=True
  {% if phbt < (temp+5) %} 
    M140 S{temp+1}
    _Home_XYZ_IfNotHomed
    M140 S{temp*1.1} 

    _MoveToBedMidpoint
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1}
    M140 S{temp+0.8}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} 
    M140 S{temp}
    _MultiMeshCreate TEMP={temp}
  {% else %}
    RESPOND TYPE=error MSG='The current bed temperature is out of the possible range ({temp}-{temp+5}Â°C) to create this mesh. It is: {phbt}Â°C'
  {% endif %}

[gcode_macro _Mesh_Create_For_020]
gcode:
  {% set temp = 20 %}
  {% set phbt = printer.heater_bed.temperature %}
  _Fan_Start_CPU

  _MultiMeshCreate TEMP={temp} STARTF=True
  {% if phbt < (temp+5) %} 
    M140 S{temp+1}
    _Home_XYZ_IfNotHomed
    M140 S{temp*1.1} 

    _MoveToBedMidpoint
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1}
    M140 S{temp+0.8}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} 
    M140 S{temp}
    _MultiMeshCreate TEMP={temp}
  {% else %}
    RESPOND TYPE=error MSG='The current bed temperature is out of the possible range ({temp}-{temp+5}Â°C) to create this mesh. It is: {phbt}Â°C'
  {% endif %}

[gcode_macro _Mesh_Create_For_030]
gcode:
  {% set temp = 30 %}
  {% set phbt = printer.heater_bed.temperature %}
  _Fan_Start_CPU

  _MultiMeshCreate TEMP={temp} STARTF=True
  {% if phbt < (temp+5) %} 
    M140 S{temp+1}
    _Home_XYZ_IfNotHomed
    M140 S{temp*1.1} 

    _MoveToBedMidpoint
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1}
    M140 S{temp+0.8}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} 
    M140 S{temp}
    _MultiMeshCreate TEMP={temp}
  {% else %}
    RESPOND TYPE=error MSG='The current bed temperature is out of the possible range ({temp}-{temp+5}Â°C) to create this mesh. It is: {phbt}Â°C'
  {% endif %}

[gcode_macro _Mesh_Create_For_040]
gcode:
  {% set temp = 40 %}
  {% set phbt = printer.heater_bed.temperature %}
  _Fan_Start_CPU

  _MultiMeshCreate TEMP={temp} STARTF=True
  {% if phbt < (temp+5) %} 
    M140 S{temp+1}
    _Home_XYZ_IfNotHomed
    M140 S{temp*1.1} 

    _MoveToBedMidpoint
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1}
    M140 S{temp+0.8}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} 
    M140 S{temp}
    _MultiMeshCreate TEMP={temp}
  {% else %}
    RESPOND TYPE=error MSG='The current bed temperature is out of the possible range ({temp}-{temp+5}Â°C) to create this mesh. It is: {phbt}Â°C'
  {% endif %}

[gcode_macro _Mesh_Create_For_050] 

gcode:
  _Fan_Start_CPU
  {% set temp = 50 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}

  M140 S{temp+1} 
  _Home_XYZ_IfNotHomed 
  M140 S{temp+10} 

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1} # Don't test maximun here, for the (unlikely) case it overshoot. One degree under target temp: There's enough energy in the heating lines left, to get quickly to the target, and it doesn't overshoot this way.
  M140 S{temp+0.8} 
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1} 
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _Mesh_Create_For_060]
gcode:
  _Fan_Start_CPU
  {% set temp = 60 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}
  M140 S{temp+1}
  _Home_XYZ_IfNotHomed
  M140 S{temp+10}

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1}
  M140 S{temp+0.8}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1}
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _Mesh_Create_For_070]
gcode:
  _Fan_Start_CPU
  {% set temp = 70 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}
  M140 S{temp+1}
  _Home_XYZ_IfNotHomed
  M140 S{temp+10}

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1+0.4} 
  M140 S{temp+0.8+0.1} 
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1} 
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _Mesh_Create_For_080]
gcode:
  _Fan_Start_CPU
  {% set temp = 80 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}
  M140 S{temp+1}
  _Home_XYZ_IfNotHomed
  M140 S{temp+10}

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1+0.7} 
  M140 S{temp+0.8+0.1} 
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1}
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _Mesh_Create_For_090]
gcode:
  _Fan_Start_CPU
  {% set temp = 90 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}
  M140 S{temp+1}
  _Home_XYZ_IfNotHomed
  M140 S{temp+10}

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1+0.9} 
  M140 S{temp+0.8+0.1} 
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1}
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _Mesh_Create_For_100]
gcode:
  _Fan_Start_CPU
  {% set temp = 100 %}
  _MultiMeshCreate TEMP={temp} STARTF=True
  TEMPERATURE_WAIT SENSOR=heater_bed Maximum={temp+1}
  M140 S{temp+1}
  _Home_XYZ_IfNotHomed
  M140 S{temp+10-5} 

  _MoveToBedMidpoint
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp-1+0.9} 
  M140 S{temp+0.8+0.1} 
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp} Maximum={temp+1}
  M140 S{temp}
  _MultiMeshCreate TEMP={temp}

[gcode_macro _MultiMeshCreate]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set temperature = params.TEMP|default(0)|int %}
  {% set startF      = params.STARTF|default(False) %}

  {% set mesh_name = "" %}

  {% if varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f %} 

    {% set mesh_name = mesh_name + "GC_" %} 
  {% else %}

    {% set mesh_name = mesh_name + "GN_" %} 
  {% endif %}

  {% set temperature_rounded = ((((temperature+0.1)/10)|round(0)|int)*10)|int %} 
  {% set temperature = temperature_rounded %}

  {% if temperature < 100 %}
    {% set mesh_name = mesh_name + "0" + temperature|string %}
  {% else %}
    {% set mesh_name = mesh_name + temperature|string %}
  {% endif %}

  {% set meshPointX = varis.mesh_probe_point_count_x %}
  {% set meshPointY = varis.mesh_probe_point_count_y %}
  {% set meshPoint_str_X = ("0" + meshPointX|string) if (meshPointX < 10) else meshPointX|string %}
  {% set meshPoint_str_Y = ("0" + meshPointY|string) if (meshPointY < 10) else meshPointY|string %}
  {% set mesh_name = mesh_name + "_" + meshPoint_str_X + "x" + meshPoint_str_Y %}

  {% if startF %}

    {% set m_gac = "OFF" %}
    {% if varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f %}
      {% set m_gac = "ON" %}
    {% endif %}

    {action_respond_info("Creating bed mesh...
    ....Bed Temperature: "+temperature|string+"Â°C
    ...Gantry Calibrate: "+m_gac+"
    Mesh Probe Points X: "+meshPointX|string+"
    Mesh Probe Points Y: "+meshPointY|string+"
    ...............Name: "+mesh_name)}

    {action_respond_info("Speed heating the bed...")} 

  {% else %}

    _Lg TYPE="posi" MSG="_MultiMeshCreate 1"

    {% if varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f %}
      _Gantry_Calibrate
    {% endif %}

    _Lg TYPE="posi" MSG="_MultiMeshCreate 2"

    _Home_Z

    _Lg TYPE="posi" MSG="_MultiMeshCreate 3"

    BED_MESH_CALIBRATE PROFILE={mesh_name}

    TURN_OFF_HEATERS
  {% endif %}

[gcode_macro _pleaseIgnoreMsg]
gcode:
  RESPOND TYPE=error MSG="Please ignore any prompts to save the configuration. It will be saved at the end, and Klipper will restart."

[gcode_macro _Mesh_Create_Calibrations_For_All_Temperatures]
gcode:
  RESPOND TYPE=command MSG="Creating bed meshes in 10Â°C-steps."
  {% set current_bed_temp = printer.heater_bed.temperature %}
  RESPOND TYPE=command MSG="Current bed temperature: {current_bed_temp}"

    {% if current_bed_temp < 15 %}
    _Mesh_Create_For_010
    _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 25 %}
    _Mesh_Create_For_020
    _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 35 %}
    _Mesh_Create_For_030
    _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 45 %}
    _Mesh_Create_For_040
    _pleaseIgnoreMsg
    {% endif %}

    {% if current_bed_temp < 55 %}
      _Mesh_Create_For_050
      _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 65 %}
      _Mesh_Create_For_060
      _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 75 %}
      _Mesh_Create_For_070
      _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 85 %}
      _Mesh_Create_For_080
      _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp < 95 %}
      _Mesh_Create_For_090
      _pleaseIgnoreMsg
    {% endif %}
    {% if current_bed_temp <= 100 %}
      _Mesh_Create_For_100
      _pleaseIgnoreMsg
    {% endif %}
    RESPOND TYPE=command MSG="Bed meshes saved. Klipper will restart."
    SAVE_CONFIG